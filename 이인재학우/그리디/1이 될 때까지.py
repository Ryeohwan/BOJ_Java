# 어떠한 수 N이  1이 될 때까지 다음의 두 과정 중 하느를 반복적으로 선택하여 수행하려고 한다. 단, 두번째 연산은 N이 K 로 나누어 떨어질 때만 선택할 수 있다.

# 1. N에서 1을 뺀다.
# 2. N을 K로 나눈다.

# 예를 들어 N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이다. 이후에 2번의 과정을 두번 수행하면 N은 1이 된다. 
# 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 된다. 이는 N을 1로 만드는 최소 횟수이다.

# 입력조건
# 첫째 줄에 N(2 <= N <= 100,000)과  K(2 <= K <= 100,000)가 공백으로 구분되며 각각 자연수로 주어진다.
# 이떄 입력으로 주어지는 N은 항상 K보다 크거나 같다.

# 출력 조건
# 첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값을 출력한다.

# 입력 
# 25 5

# 출력 
# 2

import sys

n, m = map(int, sys.stdin.readline().split())

cnt = 0
while n != 1:
    if n % m == 0:
        n //=m
        cnt += 1
    else:
        n -= 1
        cnt += 1

print(cnt)

# 해당 풀이 방법은 테스트케이스가 커질 경우 시간이 미친듯이 커진다.
# 다른 방법으로 풀어보자